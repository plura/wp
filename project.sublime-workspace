{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PW",
				"PWP"
			],
			[
				"PWP",
				"PWP_FLASHVARS"
			],
			[
				"tem",
				"template_dir"
			],
			[
				"taxo",
				"taxonomy"
			],
			[
				"tax",
				"taxonomy"
			],
			[
				"ta",
				"taxonomy"
			],
			[
				"prin",
				"print_r"
			],
			[
				"cla",
				"class_names"
			],
			[
				"op",
				"opacity"
			],
			[
				"clic",
				"clickable_parents"
			],
			[
				"THE",
				"THEME_LANG"
			],
			[
				"mod",
				"module"
			],
			[
				"obj",
				"object"
			],
			[
				"wp_",
				"wp_get_theme"
			],
			[
				"inc",
				"includes"
			],
			[
				"foot",
				"footer_y"
			],
			[
				"tr",
				"trigger_mrg"
			],
			[
				"re",
				"resize"
			],
			[
				"con",
				"console"
			],
			[
				"win",
				"win_scroll"
			],
			[
				"font-",
				"font-size"
			],
			[
				"pad",
				"padding"
			],
			[
				"pro",
				"process"
			],
			[
				"ini",
				"init_modules"
			],
			[
				"bo",
				"bottom"
			],
			[
				"padi",
				"padding-bottom"
			],
			[
				"bac",
				"background-color"
			],
			[
				"dir",
				"dirname"
			],
			[
				"enviro",
				"enviro_switch"
			],
			[
				"a",
				"auto"
			],
			[
				"ba",
				"background-size"
			],
			[
				"back",
				"background-image"
			],
			[
				"e",
				"environment"
			],
			[
				"class",
				"classes"
			],
			[
				"add",
				"addClass"
			],
			[
				"ma",
				"margin-left"
			],
			[
				"o",
				"objs"
			],
			[
				"padd",
				"padding-bottom"
			],
			[
				"text",
				"text_h"
			],
			[
				"z",
				"z-index"
			],
			[
				"wi",
				"width"
			],
			[
				"it",
				"items"
			],
			[
				"for",
				"format_data"
			],
			[
				"str",
				"string"
			],
			[
				"i",
				"ife	if â€¦ else"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "<?php\n\ninclude_once( dirname( __FILE__ ) . \"/common.php\" );\ninclude_once( dirname( __FILE__ ) . \"/media.php\");\n\n\nfunction pwp_ref_rand( $args = NULL ) {\n\n	if ( is_int( $args ) ) {\n\n		$args = array('number_of_images' => $args);\n\n	}\n\n	$params = pwp_args( array(\n		'category_filter'			=> \"\",\n		'image_src_regex'			=> \"\",\n 		'image_attributes'			=> \"\",\n		'image_class_match'			=> \"\",\n		'number_of_images'			=> 1,\n		'lang'						=> NULL,		\n		'post_type'					=> \"post\",\n		'show_images_in_galleries'	=> true,\n		'show_post_title'			=> true,\n		'show_alt_caption'			=> true,\n		'sort_randomly'				=> true,\n		'thumb_type'				=> \"thumbnail\",\n\n		/*'query'					=> array(\n			'post_type'			=> 'post',\n			'posts_per_page'	=> -1,\n			'orderby'			=> \"rand\"\n		)*/\n\n	), $args);\n\n\n	// get access to wordpress' database object\n	global $wpdb;\n\n  	// variable returned\n	$posts = array();\n\n\n  	// select the post_type sql for both post pages (post_status = 'static') \n  	// and posts (AND post_status = 'publish')\n  	// or for just pages or for just posts (the default)\n  	// by adding this where criteria, we also solve the problem\n  	// of accidentally including images from draft posts.\n	if ( is_string( $params['post_type'] ) ) {\n\n		$sql_post_type = \"post_type = '\" . $params['post_type'] . \"'\";\n\n	} else if( is_array( $params['post_type'] ) ) {\n\n		$sql_post_type = array();\n\n		foreach( $params['post_type'] as $type ) {\n\n			$sql_post_type[] = \"post_type = '\" . $type . \"'\";\n\n		}\n\n		$sql_post_type = \"AND \" . implode(' OR ', $sql_post_type);\n\n	}\n  \n	// assuming $category_filter is a comma separated list of category ids,\n	// modify query to join with post2cat table to select from only the chosen categories\n	$category_filter_join  = \"\";\n	$category_filter_sql   = \"\";\n	$category_filter_group = \"\";\n	\n	if( !empty( $params['category_filter'] ) ) {\n		\n		$category_filter_join  = \"LEFT JOIN $wpdb->term_relationships ON $wpdb->posts.ID = $wpdb->term_relationships.object_id LEFT JOIN $wpdb->term_taxonomy ON $wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id\";\n		\n		$category_filter_sql   = \"AND $wpdb->term_taxonomy.term_id IN (\" . $params['category_filter'] . \")\";   \n		\n		$category_filter_group = \"GROUP BY $wpdb->posts.ID\";\n	\n	}\n  \n	// by default we sort images randomly,\n	// but we can also sort them in descending date order\n	if ( $params['sort_randomly'] ) {\n\n		$sql_order_by = \"rand()\";\n\n	} else {\n\n		$sql_order_by = \"$wpdb->posts.post_date DESC\";\n\n	}\n\n	// query records that contain img tags, ordered randomly\n	// do not select images from password protected posts\n	$sql = \"SELECT $wpdb->posts.ID, $wpdb->posts.post_title, $wpdb->posts.post_content, $wpdb->posts.post_excerpt \n			FROM $wpdb->posts \n			$category_filter_join \n			WHERE (post_content LIKE '%<img%' or post_content LIKE '%[gallery%') 														  \n			AND post_password = '' \n			$sql_post_type \n			$category_filter_sql \n			$category_filter_group \n			ORDER BY $sql_order_by\";\n\n\n	$rows = $wpdb->get_results( $sql );\n\n\n	// keep track of multiple images to prevent displaying duplicates\n	$image_srcs = array();\n\n	// loop through each applicable post from the database\n	$image_count = 0;\n	\n	foreach( $rows as $row ) {\n\n		$matches = array();\n\n    	// find all img tags within each post's content\n    	preg_match_all(\"/<img[^>]+>/i\", $row->post_content, $matches);  //todo guid/src only\n		\n		if( $params['show_images_in_galleries'] ){\n	\n			// find any gallery attachments\n			if(strpos($row->post_content, '[gallery') !== false){\n\n				$images = pwp_get_post_images( $row->ID );\n				\n				if ( $images ) {\n\n					foreach ($images as $image){\n						\n						$matches[0][] = \"<img src=\\\"\" . $image->guid . \"\\\"/>\";\n					\n					}\n\n				}		\n			\n			}\n    	\n    	}\n\n		// if there are none, try again,  \n		if( !count($matches[0]) ) {\n\n			continue;\n\n		}\n\n		// randomize the array of images in this post\n		shuffle($matches[0]);\n\n		// loop through each image candidate for this post and try to find a winner        \n		foreach($matches[0] as $image_element) {\n			\n			preg_match(\"/src\\s*=\\s*(\\\"|')(.*?)\\\\1/i\", $image_element, $image_src);\n			\n			$image_src = $image_src[2];      \n	  \n	  		// make sure we haven't displayed this image before\n			if( empty( $image_src ) || in_array($image_src, $image_srcs) ) {\n\n				continue;\n\n			// if a regex is supplied and it doesn't match, try next post\n			} elseif ( !empty( $params['image_src_regex'] ) && !preg_match(\"/\" .  $params['image_src_regex'] . \"/i\", $image_src)) {\n\n				continue;\n\n			}\n\n			if( !empty( $params['image_class_match'] ) ) {\n				// grab the class attribute and see if it exists, if not try again\n	        	preg_match(\"/class\\s*=\\s*(\\\"|')(.*?)\\\\1/i\", $image_element, $image_classes);\n    	    	\n    	    	$image_classes = $image_classes[2];\n\n				if($image_classes == '') {\n\n					continue;\n\n				}\n\n				$image_classes = explode(\" \", $image_classes);\n				\n				if(!in_array($params['image_class_match'], $image_classes)) {\n\n					continue;\n\n				}\n			\n			}\n\n			// add img src to array to check for duplicates\n			$image_srcs[] = $image_src;\n         \n			// grab the alt attribute and see if it exists, if not supply default\n			preg_match(\"/alt\\s*=\\s*(\\\"|')(.*?)\\\\1/i\", $image_element, $image_alt);\n			\n			$image_alt = $image_alt[2];\n\n			if( empty( $image_alt ) ) {\n\n				$image_alt = \"random image\";\n\n			}\n\n			\n			$img = pwp_image_info( $image_src );\n			\n			$posts[] 	= array(\n				'title' 	=> pwp_trans( $row->post_title, $params['lang'] ),  //pwp_strip_qtlang($row['post_title']),\n				'permalink' => get_permalink($row->ID),\n				'content'	=> pwp_trans( $row->post_content, $params['lang']),\n				'excerpt'   => pwp_trans( $row->post_excerpt, $params['lang']),\n				'img'		=> $img\n			);\n		\n	      	$image_count++;\n	  \n	  		//returns posts\n			if($image_count == $params['number_of_images'] )	{\n\n				return $posts;\n\n			}\n	  \n			//leave the foreach loop and look for images in other posts\n			//TODO: if people wanted to display multiple images per post, we would selectively skip this break\n			break;\n		}\n	}\n}\n\n\n\n\n/**\n* gets image info. the regex is fundamental to correctly retrieve the image metadata. '(.*\\:\")?' is used\n* because the file name and its path maybe separated. The '\\:\"' follows WP syntax pattern regarding image \n* metadata entries in the db\n* @param	id		image id or file string\n* @param	type	image types: 'thumbnail', 'medium', 'large'\n*/\nfunction pwp_image_info( $id ){\n	\n	global $wpdb;\n\n	if(!is_numeric( $id ) ) {\n		\n		$reg	= preg_replace('/^.*\\/([0-9]{4}\\/[0-9]{2}\\/)(.*)$/', '$1(.*\\:\")?$2', $id);\n		\n		$rows	= $wpdb->get_results(\"SELECT $wpdb->postmeta.post_id FROM $wpdb->postmeta \n							   		  WHERE $wpdb->postmeta.meta_value REGEXP '$reg' LIMIT 1\");\n		$id		= $rows[0]->post_id;\n	\n	}\n\n	$a	= wp_get_attachment_metadata( $id );\n\n	$u	= wp_upload_dir();\n	\n	$a['dir']	= $u['baseurl'] . preg_replace('/^(.*[0-9]{2}\\/).*$/', '/$1', $a['file']);\n\n	$a['file']	= preg_replace('/^.*[0-9]{2}\\/(.*)$/', '$1', $a['file']);\n\n	return $a;\n\n}\n\n\n\n\n/**\n* @param	catID		categoryID\n* @param	limit		number of posts\n* @param	thumbdim	size limit of thumb\n* @param	width		limits thumbdim by width if true. othewise limits by height\n* @param	radimg		if true and multiple images are retrieved, return a random one. \n*						otherwise only the first is returned\n* @param	suffix		wordpress suffix\n*\n*/\nfunction pwp_ref( $args = NULL ){	\n\n	if ( is_int( $args ) ) {\n\n		$prms = array( 'posts_per_page' => $args );\n\n	} else if ( is_string( $args ) ) {\n\n		parse_str( $args, $prms );\n\n	} else {\n\n		$prms = $args;\n\n	}\n\n	$params = pwp_args( array(\n		'post_type' 		=> 'post',\n		'posts_per_page'	=> 5\n	), $prms );\n\n	$query 	= new WP_Query( $params );\n	\n	$p 		= array();\n	\n	if( count( $query->posts ) ) {\n\n		foreach( $query->posts as $post ) {\n	\n			$row = array(\n				'excerpt'	=> get_the_excerpt( $post->ID ), //pwp_excerpt($row['content']);\n				'url'		=> get_permalink( $post->ID ),\n				'title'		=> get_the_title( $post->ID ),\n				'content'	=> get_the_content( $post->ID ),\n				'date'		=> get_the_date( $post->ID )\n			);\n\n			$row['html'] = \"<a href=\\\"\" . $row['url'] . \"\\\" title=\\\"\" . $row['title'] . \"\\\" class=\\\"ref title\\\">\" . $row['title'] . \"</a>\\n\";\n\n\n			$image = pwp_get_post_image( $post->ID, 'thumbnail');\n\n\n			if ( !$image ) {\n\n				preg_match_all('/(img|src)=(\"|\\')[^\"\\'>]+/i', get_the_content( $post->ID ), $matches);	//matches all img tags\n	\n				if(!empty($matches) && !empty($matches[0])) {\n\n					$src = preg_replace('/(img|src)(\"|\\'|=\"|=\\')(.*)/i',\"$3\", $matches[0]);	//retrieves src tags\n		\n					if(is_array($src)) {\n\n						$src = $src[0]; 										//in case of multiple urls\n				\n					}\n\n					$img = pwp_image_info( $src );\n\n					if($img){\n					\n						$row['img']	= $img['sizes'];\n					\n						if(!empty($img['sizes'])){\n						\n							foreach($row['img'] as &$r){ \n						\n								$r['src'] = $img['dir'] . $r['file']; \n						\n							}\n					\n						}				\n			\n						$image = array( isset($row['img']['thumbnail']) ? $row['img']['thumbnail']['src'] : $img['dir'] . $img['file'] );\n\n					}								\n\n				}\n		\n			}\n				\n			if ( $image ) {\n\n				$row['html']   .= \"<a href=\\\"$row[url]\\\" title=\\\"$row[title]\\\" class=\\\"ref img\\\"><img src=\\\"\" . $image[0] . \"\\\"/></a>\\n\";\n\n			}			\n	\n			$row['html']   .= \"<a href=\\\"$row[url]\\\" title=\\\"$row[title]\\\" class=\\\"ref excerpt\\\">$row[excerpt]</a>\\n\";\n\n			array_push($p, $row);\n	\n		}\n\n		return $p;\n	\n	}\n	\n	return false;\n\n}\n\n\n\nfunction pwp_excerpt($text, $n=55, $more='[...]'){\n	\n	$words = explode(' ', strip_tags($text), 55+1);\n	\n	if(count($words)>$n){\n		\n		array_pop($words);\n		\n		array_push($words,'[...]');\n	\n	}\n	\n	return implode(' ', $words);\n\n}\n?>\n",
			"file": "pwp/php/functions/wp-refresh.php",
			"file_size": 9982,
			"file_write_time": 131086004330000000,
			"settings":
			{
				"buffer_size": 9577,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test/wp-content/themes/ptheme/functions.php",
			"settings":
			{
				"buffer_size": 720,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test/wp-content/themes/ptheme/pwp/php/includes/js.php",
			"settings":
			{
				"buffer_size": 3140,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test/wp-content/themes/ptheme/header.php",
			"settings":
			{
				"buffer_size": 603,
				"line_ending": "Windows"
			}
		},
		{
			"file": "test/wp-content/themes/ptheme/footer.php",
			"settings":
			{
				"buffer_size": 524,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 268.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ja",
				"Set Syntax: JavaScript"
			],
			[
				"lin",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"sublinter",
				"SublimeLinter: Enable Linting"
			],
			[
				"sublimelinter",
				"SublimeLinter: Choose Mark Style"
			],
			[
				"lint ",
				"SublimeLinter: Enable Linting"
			],
			[
				"lint",
				"SublimeLinter: Lint This View"
			],
			[
				"javas",
				"Set Syntax: JavaScript"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"emmet",
				"Emmet: Expand Abbreviation"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"syntax J",
				"Set Syntax: JavaScript"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 120.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Plura/dev/code/wp",
		"/C/Plura/dev/code/wp/plugin",
		"/C/Plura/dev/code/wp/plugin/core",
		"/C/Plura/dev/code/wp/pwp",
		"/C/Plura/dev/code/wp/test",
		"/C/Plura/dev/code/wp/test/wp-content",
		"/C/Plura/dev/code/wp/test/wp-content/themes",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme"
	],
	"file_history":
	[
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/functions.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/nav.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/js/p.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/php/includes/js.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/init.php",
		"/C/Plura/dev/code/wp/test/wp-content/plugins/babka/babka_custom_parties.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/__old/pwp/init.php",
		"/C/Plura/dev/code/wp/src/pwp/js/p.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/functions.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/js/jquery-noconflict.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/js/jquery.noconflict.js",
		"/C/Plura/dev/code/wp/src/pwp/php/functions/wp.php",
		"/C/Plura/dev/code/wp/plugin/core/styles.old.css",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/layout/ResizeManager.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/content-page.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/header.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/style.css",
		"/C/Plura/dev/code/wp/test/wp-config.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/functions/fn.php",
		"/C/Plura/dev/code/wp/plugin/core/styles.css",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/css/transitions.css",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/pwp/js/p.wp.js",
		"/C/Plura/dev/code/wp/src/js/p.wp.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/content.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/layout/InfiniteScroll.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/utils/utils.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/modules/Quotes.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/page/contacts.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/modules/Contacts.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/constants/BreakPoints.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/_content/head.dev.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/css/colors.css",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/content-header.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/archive.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/process/process.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/utils/InfiniteScroll.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/bootstrap/walkers/pwp_bootstrap_navwalker.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/ptheme.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/modal.php",
		"/C/Plura/dev/code/wp/src/init.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/languages/pt_PT.mo",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/languages/pt_PT.po",
		"/C/Plura/dev/code/wp/src/php/includes/js.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/content-page.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/content-post.php",
		"/C/Plura/dev/code/wp/README.md",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/footer/footer-minified.php",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/css/fonts.css",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/ptheme.min.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/footer.php",
		"/C/Plura/dev/code/wp/src/js/p.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/data/Lang.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/js/dev/modules/Footer.js",
		"/C/Plura/dev/code/wp/test/wp-content/themes/ptheme/includes/footer.php",
		"/C/Plura/dev/code/wp/src/js/p.admin.js",
		"/C/Plura/dev/installs/apps/skin/colantes/worten/error_log",
		"/C/Plura/dev/code/wp/src/php/functions/media.php",
		"/C/Plura/dev/code/wp/plugin/core/init.php",
		"/C/Plura/dev/code/wp/project.sublime-project",
		"/C/Plura/dev/code/js/project.sublime-project",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/pwp/js/external/jquery-ui/jquery-ui.min.css",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/pwp/error_log",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/content-page.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/process/process.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/process/sidebar2.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/_content/header.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/footer.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/_content/header.dev.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/js/core/sgl.js",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/css/custom3.css",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/js/core/modules/Contacts.js",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/js/core/layout/Refresh.js",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/js/core/layout/Banner.js",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/css/colors.css",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/js/core/modules/Home.js",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/js/core/modules/Library.js",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/plura_www_socgeografialisboa_pt_2014/_content/header.php",
		"/C/Plura/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl/_content/stats.php",
		"/C/Plura/dev/sites/2013/ohmm/ohmm.sublime-project",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/_content/scripts.min.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/_content/scripts.dev.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/js/modules/checkout/Houses.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/js/modules/Concept.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/fn/functions.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/process/core_houses.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/js/ohmm.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/js/modules/checkout/Services.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/js/modules/Houses.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/checkout/Houses.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/concept/Presentation.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/process/core_partners.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/process/core_services_init.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/style.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/css/colors.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/css/fonts.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/content-page.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/css/colors.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/Checkout.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/checkout/Services.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/Contacts.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/Concept.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/concept/Content.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/process.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/constants/Labels.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/includes/menu_main.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm/header.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/header.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/plugins/ohmm/ohmm-houses.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/plugins/ohmm/ohmm.php",
		"/C/Plura/dev/sites/2014/pbcm/project.sublime-project",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/css/transitions.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/ohmm.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/Home.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/layout/resize/ResizeManager.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/process/core_services_init.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/process/core_services_process.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/houses/House.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/Houses.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/layout/resize/ResizeToggle.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/plugins/ohmm/styles.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/plugins/ohmm/ohmm-services.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-admin/options-head.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-admin/options.php",
		"/C/Plura/dev/sites/2013/ohmm/site/temp/index1/css/styles.css",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-admin/network/site-themes.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-includes/shortcodes.php",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_content/js/modules/checkout/services/Select.js",
		"/C/Plura/dev/sites/2013/ohmm/site/wp/wp-content/themes/plura_www_ohmm_pt/_lib/js/p.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\Plura\\dev\\code\\wp\\test\\wp-content\\themes\\ptheme\\pwp",
			"C:\\Plura\\dev\\code\\wp\\test\\wp-content\\themes\\ptheme",
			"C:\\Plura\\dev\\code\\wp\\test\\wp-content\\plugins\\qtranslate-x",
			"C:\\Plura\\dev\\code\\wp\\test\\wp-content\\themes\\ptheme",
			"C:\\Plura\\dev\\code\\wp",
			"C:\\Plura\\dev\\sites\\2014\\socgeografialisboa\\site\\wp\\wp-content\\themes\\twentyfourteen",
			"C:\\Plura\\dev\\sites\\2014\\socgeografialisboa\\site\\wp\\wp-content\\themes\\sgl",
			"C:\\Plura\\dev\\sites\\2014\\socgeografialisboa\\site\\wp\\wp-content\\themes\\sgl\\js\\core",
			"C:\\Plura\\dev\\sites\\2014\\socgeografialisboa\\site\\wp\\wp-content\\themes\\sgl\\_content",
			"C:\\Plura\\dev\\sites\\2014\\socgeografialisboa\\site\\wp\\wp-content\\themes\\sgl",
			"C:\\Plura\\dev\\sites\\2014\\socgeografialisboa\\site\\wp\\wp-content\\themes\\sgl\\js\\core",
			"C:\\Plura\\dev\\sites\\2013\\ohmm\\site\\wp\\wp-content\\themes\\ohmm",
			"C:\\Plura\\dev\\sites\\2013\\ohmm\\site\\wp\\wp-content\\themes\\plura_www_ohmm_pt\\_content\\js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"pwp_enqueue_js",
			"PWP_TEMPLATE_DIR",
			"PWP_TEMPLATE_DIR ",
			"PWP_TEMPLATE_DIR",
			", '1.0.0' ",
			"_content/img",
			"PWP_TEMPLATE_DIR",
			"PWP_TEMPLATE_URL",
			"ddd",
			"PWP_TEMPLATE_URL",
			"PWP_TEMPLATE_DIR",
			"PWP_TEMPLATE_URL",
			"PWP_URL",
			"URL_INDEX",
			"$URL_INDEX",
			"exi",
			"echo",
			"print",
			"PWP_URL",
			"$categories",
			"echo ",
			"<?php",
			":",
			"			",
			"permalink",
			"=>",
			"$URL_INDEX",
			"URL_INDEX",
			"pwp_",
			"true",
			".css",
			". '/",
			"qtrans",
			"3.3.5",
			"thumbnail",
			"{\n",
			"'twentyfifteen'",
			"clickable-parent",
			"parent-clickable",
			"{",
			"clickable",
			"'';",
			"nav_menu_css_class",
			"Walker_Nav_Menu",
			"239",
			"{",
			".jumbotron h1",
			"http://localhost/dev/code/wp/test/wp-content/themes/ptheme",
			"pwp",
			"novasotecma",
			"http://localhost/dev/code/wp/test/wp-content/themes/ptheme",
			"object",
			"PROCESS",
			"process",
			"$lllang",
			"_theme_name()",
			" _theme_name()",
			"_theme_name()",
			"theme",
			"'novasotecma'",
			"qtrans_getLanguage",
			"_getLanguage",
			"eventWindowResizeHandler",
			"40",
			"{",
			" }",
			"{",
			"http://localhost/dev/code/wp/test/wp-content/themes/ptheme",
			"win_scroll",
			"_self",
			"'novasotecma'",
			"options.process",
			"c",
			"http://localhost/dev/code/wp/test/wp-content/themes/ptheme",
			"this",
			"h3",
			"{",
			"<div class=\"col-md-3\"></div>",
			"twentyfifteen_post_thumbnail",
			"header.php'",
			"_theme_name()",
			"{",
			"$a",
			"PWP.l",
			"sidebar.php",
			"test/",
			", 'twentyfourteen'",
			"_content/",
			"pwp.process",
			"_content",
			"_content/",
			"_content",
			"process.php",
			"http://localhost/dev/sites/2014/socgeografialisboa/site/wp/wp-content/themes/sgl",
			"_content/",
			"process/",
			"starter template",
			"script",
			"http://localhost/dev/sites/2013/ohmm/site/wp/wp-content/themes/ohmm",
			"primary-navigation",
			"lang",
			"pwp.lang",
			"options.lang",
			"primar",
			"#primary-navigation",
			"header #primary-navigation",
			"header-m",
			"site-header",
			"header",
			"path",
			"options.ID",
			"id",
			"options.ID",
			"options.pwp.lang",
			"options.lang",
			"options.ID",
			"options.lang",
			"core",
			"css",
			"social",
			"travellers",
			"init_secondary_menu",
			"touch",
			"all",
			"labels",
			"opts",
			"[lang",
			"objs"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"[opts.lang"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pwp/php/functions/wp-refresh.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9577,
						"regions":
						{
						},
						"selection":
						[
							[
								372,
								372
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5175.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "test/wp-content/themes/ptheme/functions.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 720,
						"regions":
						{
						},
						"selection":
						[
							[
								170,
								170
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "test/wp-content/themes/ptheme/pwp/php/includes/js.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3140,
						"regions":
						{
						},
						"selection":
						[
							[
								981,
								981
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1494.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "test/wp-content/themes/ptheme/header.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 603,
						"regions":
						{
						},
						"selection":
						[
							[
								271,
								271
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test/wp-content/themes/ptheme/footer.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 524,
						"regions":
						{
						},
						"selection":
						[
							[
								257,
								257
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "project.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ohmmsty",
				"wp\\wp-content\\themes\\plura_www_ohmm_pt\\style.css"
			],
			[
				"styles.",
				"temp\\index1\\css\\styles.css"
			],
			[
				"resize",
				"wp\\wp-content\\themes\\plura_www_ohmm_pt\\_content\\js\\layout\\resize\\ResizeManager.js"
			],
			[
				"flat",
				"utils\\Flat.js"
			],
			[
				"exten",
				"utils\\Extend.js"
			],
			[
				"in",
				"install"
			],
			[
				"menu",
				"templates\\structures\\Menu.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "ohmm",
		"selected_items":
		[
			[
				"ohmm",
				"C:\\Plura\\dev\\sites\\2013\\ohmm\\ohmm.sublime-project"
			],
			[
				"novaso",
				"C:\\Plura\\dev\\sites\\2014\\novasotecma\\project.sublime-project"
			],
			[
				"europa",
				"C:\\Plura\\dev\\sites\\2016\\europa21\\project.sublime-project"
			],
			[
				"showcase",
				"C:\\Plura\\dev\\code\\apps\\showcase\\project.sublime-project"
			],
			[
				"multifoto",
				"C:\\Plura\\dev\\sites\\2015\\multifoto\\project.sublime-project"
			],
			[
				"nov",
				"C:\\Plura\\dev\\sites\\2014\\novasotecma\\project.sublime-project"
			],
			[
				"",
				"C:\\Plura\\dev\\sites\\2014\\pbcm.intro\\project.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 498.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
